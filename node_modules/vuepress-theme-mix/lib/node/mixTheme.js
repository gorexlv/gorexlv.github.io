"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mixTheme = void 0;
const plugin_container_1 = require("@vuepress/plugin-container");
const utils_1 = require("@vuepress/utils");
const plugin_git_1 = require("@vuepress/plugin-git");
const plugin_medium_zoom_1 = require("@vuepress/plugin-medium-zoom");
const plugin_nprogress_1 = require("@vuepress/plugin-nprogress");
const plugin_palette_1 = require("@vuepress/plugin-palette");
const plugin_shiki_1 = require("@vuepress/plugin-shiki");
const plugin_theme_data_1 = require("@vuepress/plugin-theme-data");
const utils_2 = require("./utils");
const vuepress_plugin_back_top_1 = require("@vuepress-theme-mix/vuepress-plugin-back-top");
const mixTheme = ({ themePlugins = {}, ...localeOptions } = {}) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
    (0, utils_2.assignThemeData)(localeOptions);
    return {
        name: 'vuepress-theme-mix',
        layouts: {
            Layout: utils_1.path.resolve(__dirname, '../client/layouts/Layout.vue'),
            404: utils_1.path.resolve(__dirname, '../client/layouts/404.vue'),
        },
        clientConfigFile: utils_1.path.resolve(__dirname, '../client/config.js'),
        extendsPage: (page) => {
            // save relative file path into page data to generate edit link
            page.data.filePathRelative = page.filePathRelative;
            // save title into route meta to generate navbar and sidebar
            page.routeMeta.title = page.title;
        },
        // buit-in plugins
        plugins: [
            // ['@vuepress-theme-mix/back-top', themePlugins.backTop !== false],
            // @vuepress-theme-mix/back-top
            themePlugins.backTop !== false ? (0, vuepress_plugin_back_top_1.backTopPlugin)() : [],
            // @vuepress/plugin-theme-data
            (0, plugin_theme_data_1.themeDataPlugin)({ themeData: localeOptions }),
            // @vuepress/plugin-palette
            (0, plugin_palette_1.palettePlugin)({ preset: 'sass' }),
            // @vuepress/plugin-medium-zoom
            themePlugins.mediumZoom !== false
                ? (0, plugin_medium_zoom_1.mediumZoomPlugin)({
                    selector: '.theme-mix-content > img:not(.no-zoom), .theme-mix-content :not(a) > img:not(.no-zoom)',
                    zoomOptions: {},
                    delay: 300,
                })
                : [],
            // @vuepress/plugin-container
            ((_a = themePlugins.container) === null || _a === void 0 ? void 0 : _a.tip) !== false
                ? (0, plugin_container_1.containerPlugin)((0, utils_2.resolveContainerPluginOptions)(localeOptions, 'tip'))
                : [],
            ((_b = themePlugins.container) === null || _b === void 0 ? void 0 : _b.warning) !== false
                ? (0, plugin_container_1.containerPlugin)((0, utils_2.resolveContainerPluginOptions)(localeOptions, 'warning'))
                : [],
            ((_c = themePlugins.container) === null || _c === void 0 ? void 0 : _c.danger) !== false
                ? (0, plugin_container_1.containerPlugin)((0, utils_2.resolveContainerPluginOptions)(localeOptions, 'danger'))
                : [],
            ((_d = themePlugins.container) === null || _d === void 0 ? void 0 : _d.reference) !== false
                ? (0, plugin_container_1.containerPlugin)((0, utils_2.resolveContainerPluginOptions)(localeOptions, 'reference'))
                : [],
            ((_e = themePlugins.container) === null || _e === void 0 ? void 0 : _e.details) !== false
                ? (0, plugin_container_1.containerPlugin)({
                    type: 'details',
                    before: (info) => `<details class="custom-container details">${info ? `<summary>${info}</summary>` : ''}\n`,
                    after: () => '</details>\n',
                })
                : [],
            ((_f = themePlugins.container) === null || _f === void 0 ? void 0 : _f.codeGroup) !== false
                ? (0, plugin_container_1.containerPlugin)({
                    type: 'code-group',
                    before: () => '<CodeGroup>\n',
                    after: () => '</CodeGroup>\n',
                })
                : [],
            ((_g = themePlugins.container) === null || _g === void 0 ? void 0 : _g.codeGroupItem) !== false
                ? (0, plugin_container_1.containerPlugin)({
                    type: 'code-group-item',
                    before: (info) => `<CodeGroupItem title="${info}">\n`,
                    after: () => '</CodeGroupItem>\n',
                })
                : [],
            // @vuepress/plugin-shiki
            (themePlugins === null || themePlugins === void 0 ? void 0 : themePlugins.shiki) !== false
                ? (0, plugin_shiki_1.shikiPlugin)({
                    theme: (_j = (_h = themePlugins.shiki) === null || _h === void 0 ? void 0 : _h.theme) !== null && _j !== void 0 ? _j : 'github-dark-dimmed',
                    langs: (_l = (_k = themePlugins.shiki) === null || _k === void 0 ? void 0 : _k.langs) !== null && _l !== void 0 ? _l : [],
                })
                : [],
            // @vuepress/plugin-nprogress
            (themePlugins === null || themePlugins === void 0 ? void 0 : themePlugins.nprogress) !== false ? (0, plugin_nprogress_1.nprogressPlugin)() : [],
            // @vuepress/plugin-git
            (themePlugins === null || themePlugins === void 0 ? void 0 : themePlugins.git) !== false
                ? (0, plugin_git_1.gitPlugin)({
                    createdTime: false,
                    updatedTime: localeOptions.lastUpdated !== false,
                })
                : [],
        ],
        extendsMarkdown: (md) => {
            if (localeOptions.figcaption !== false) {
                md.use(require('markdown-it-implicit-figures'), {
                    figcaption: true,
                });
            }
            if (localeOptions.sub !== false)
                md.use(require('markdown-it-sub'));
            if (localeOptions.sup !== false)
                md.use(require('markdown-it-sup'));
            if (localeOptions.footnote !== false) {
                md.use(require('markdown-it-footnote'));
            }
        },
    };
};
exports.mixTheme = mixTheme;
