import { inject } from 'vue';
import { useRoute } from 'vue-router';
import { isArray, isLinkHttp, isPlainObject, isString, resolveLocalePath, } from '@vuepress/shared';
import { useNavLink } from './useNavLink';
export const sidebarItemsSymbol = Symbol('sidebarItems');
/**
 * Inject sidebar items global computed
 */
export const useSidebarItems = () => {
    const sidebarItems = inject(sidebarItemsSymbol);
    if (!sidebarItems) {
        throw new Error('useSidebarItems() is called without provider.');
    }
    return sidebarItems;
};
/**
 * Resolve sidebar items global computed
 *
 * It should only be resolved and provided once
 */
export const resolveSidebarItems = (frontmatter, themeLocale) => {
    var _a, _b;
    // get sidebar config from frontmatter > themeConfig
    const sidebarConfig = (_b = (_a = frontmatter.sidebar) !== null && _a !== void 0 ? _a : themeLocale.sidebar) !== null && _b !== void 0 ? _b : 'false';
    // resolve sidebar items according to the config
    if (frontmatter.home || sidebarConfig === false) {
        return [];
    }
    if (isArray(sidebarConfig)) {
        return resolveArraySidebarItems(sidebarConfig);
    }
    if (isPlainObject(sidebarConfig)) {
        return resolveMultiSidebarItems(sidebarConfig);
    }
    return [];
};
/**
 * Resolve sidebar items if the config is an array
 */
export const resolveArraySidebarItems = (sidebarConfig, topPrefix = '/') => {
    const isRelative = (p) => !isLinkHttp(p) && p.substring(0, 1) !== '/';
    const handleChildItem = (prefix = topPrefix) => {
        return function (item) {
            let childItem;
            if (isString(item)) {
                if (isRelative(item)) {
                    item = prefix.replace(/\/+$/, '') + '/' + item;
                }
                const resolved = useNavLink(item);
                return {
                    type: 'link',
                    text: resolved.text,
                    link: resolved.link,
                };
            }
            else {
                childItem = item;
            }
            if (childItem.type === 'link') {
                if (isRelative(childItem.link)) {
                    childItem.link = prefix.replace(/\/+$/, '') + '/' + childItem.link;
                }
                const resolved = useNavLink(childItem.link);
                childItem.link = resolved.link;
                return childItem;
            }
            if (childItem.type === 'group' || childItem.type === 'link-group') {
                if (isRelative(childItem.link)) {
                    childItem.link = prefix.replace(/\/+$/, '') + '/' + childItem.link;
                }
                const resolved = useNavLink(childItem.link);
                childItem.link = resolved.link;
                if (childItem.children.length) {
                    childItem.children = childItem.children.map(handleChildItem(childItem.link));
                }
                return childItem;
            }
            return childItem;
        };
    };
    return sidebarConfig.map((item) => {
        if (isString(item)) {
            if (isRelative(item))
                item = topPrefix + item;
            const resolved = useNavLink(item);
            return {
                type: 'link',
                text: resolved.text,
                link: resolved.link,
            };
        }
        if (item.type === 'link') {
            if (isRelative(item.link))
                item.link = topPrefix + item.link;
            const resolved = useNavLink(item.link);
            item.link = resolved.link;
            return item;
        }
        if (item.type === 'group') {
            if (isRelative(item.link))
                item.link = topPrefix + item.link;
            return {
                ...item,
                children: item.children.map(handleChildItem(item.link)),
            };
        }
        if (item.type === 'link-group') {
            if (isRelative(item.link))
                item.link = topPrefix + item.link;
            const resolved = useNavLink(item.link);
            item.link = resolved.link;
            return {
                ...item,
                children: item.children.map(handleChildItem(item.link)),
            };
        }
        throw new Error(`Unknown sidebar item type: ${item.type}.`);
    });
};
/**
 * Resolve sidebar items if the config is a key -> value (path-prefix -> array) object
 */
export const resolveMultiSidebarItems = (sidebarConfig) => {
    var _a;
    const route = useRoute();
    const sidebarPath = resolveLocalePath(sidebarConfig, route.path);
    const matchedSidebarConfig = (_a = sidebarConfig[sidebarPath]) !== null && _a !== void 0 ? _a : [];
    return resolveArraySidebarItems(matchedSidebarConfig, sidebarPath);
};
