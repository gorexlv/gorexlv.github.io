import { computed } from 'vue';
import { useRouter } from 'vue-router';
import { useRouteLocale, useSiteLocaleData } from '@vuepress/client';
import { useThemeLocaleData } from './useThemeData';
export const useNavbarSelectLanguage = () => {
    const router = useRouter();
    const siteLocaleDataRef = useSiteLocaleData();
    const themeLocaleDataRef = useThemeLocaleData();
    const routeLocaleRef = useRouteLocale();
    return computed(() => {
        var _a, _b;
        const locales = Object.keys(siteLocaleDataRef.value.locales);
        if (locales.length < 2) {
            return [];
        }
        const currentPath = router.currentRoute.value.path;
        const currentFullPath = router.currentRoute.value.fullPath;
        const languageDropdown = {
            text: (_a = themeLocaleDataRef.value.selectLanguageText) !== null && _a !== void 0 ? _a : 'Languages',
            icon: '',
            ariaLabel: (_b = themeLocaleDataRef.value.selectLanguageAriaLabel) !== null && _b !== void 0 ? _b : 'unkown language',
            children: locales.map((targetLocalePath) => {
                var _a, _b, _c, _d, _e, _f;
                // target locale config of this langauge link
                const targetSiteLocale = (_b = (_a = siteLocaleDataRef.value.locales) === null || _a === void 0 ? void 0 : _a[targetLocalePath]) !== null && _b !== void 0 ? _b : {};
                const targetThemeLocale = (_d = (_c = themeLocaleDataRef.value.locales) === null || _c === void 0 ? void 0 : _c[targetLocalePath]) !== null && _d !== void 0 ? _d : {};
                const targetLang = `${targetSiteLocale.lang}`;
                const text = (_e = targetThemeLocale.selectLanguageName) !== null && _e !== void 0 ? _e : targetLang;
                let link;
                if (targetLang === siteLocaleDataRef.value.lang) {
                    // if the target language is current language
                    // stay at current link
                    link = currentFullPath;
                }
                else {
                    // if the target language is not current language
                    // try to link to the corresponding page of current page
                    // or fallback to homepage
                    const targetLocalePage = currentPath.replace(routeLocaleRef.value, targetLocalePath);
                    if (router.getRoutes().some((item) => item.path === targetLocalePage)) {
                        link = targetLocalePage;
                    }
                    else {
                        link = (_f = targetThemeLocale.home) !== null && _f !== void 0 ? _f : targetLocalePath;
                    }
                }
                return {
                    text,
                    link,
                };
            }),
        };
        return [languageDropdown];
    });
};
