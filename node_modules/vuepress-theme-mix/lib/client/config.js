import { h, computed, onMounted, provide, ref } from 'vue';
import { defineClientConfig, usePageFrontmatter } from '@vuepress/client';
import CodeGroup from './components/global/CodeGroup';
import CodeGroupItem from './components/global/CodeGroupItem.vue';
import CodePenSnippet from './components/global/CodePenSnippet.vue';
import OutboundLink from './components/global/OutboundLink.vue';
import { resolveSidebarItems, sidebarItemsSymbol, themeModeSymbol, useThemeLocaleData, useScrollPromise, } from './composables';
import './styles/index.scss';
export default defineClientConfig({
    enhance({ app, router }) {
        app.component('CodeGroup', CodeGroup);
        app.component('CodeGroupItem', CodeGroupItem);
        app.component('CodePenSnippet', CodePenSnippet);
        // unregister the built-in `<OutboundLink>` to avoid warning
        delete app._context.components.OutboundLink;
        // override the built-in `<OutboundLink>`
        app.component('OutboundLink', OutboundLink);
        // compat with @vuepress/plugin-docsearch and @vuepress/plugin-search
        app.component('NavbarSearch', () => {
            const SearchComponent = app.component('Docsearch') || app.component('SearchBox');
            if (SearchComponent) {
                return h(SearchComponent);
            }
            return null;
        });
        // handle scrollBehavior with transition
        const scrollBehavior = router.options.scrollBehavior;
        router.options.scrollBehavior = async (...args) => {
            await useScrollPromise().wait();
            return scrollBehavior(...args);
        };
    },
    setup() {
        var _a;
        const themeLocale = useThemeLocaleData();
        // dark theme supported
        const themeMode = ref((_a = themeLocale.value.mode) !== null && _a !== void 0 ? _a : 'auto');
        onMounted(() => {
            var _a;
            if (themeMode.value === 'auto') {
                const media = window.matchMedia('(prefers-color-scheme: dark)');
                themeMode.value = (_a = localStorage.theme) !== null && _a !== void 0 ? _a : (media.matches ? 'dark' : 'light');
                window
                    .matchMedia('(prefers-color-scheme: dark)')
                    .addEventListener('change', (e) => {
                    if (e.matches) {
                        themeMode.value = 'dark';
                    }
                    else {
                        themeMode.value = 'light';
                    }
                    document.documentElement.dataset.theme = themeMode.value;
                    localStorage.setItem('theme', themeMode.value);
                });
            }
            document.documentElement.dataset.theme = themeMode.value;
        });
        provide(themeModeSymbol, themeMode);
        // we need to access sidebar items in multiple components
        // so we make it global computed
        const frontmatter = usePageFrontmatter();
        const sidebarItems = computed(() => resolveSidebarItems(frontmatter.value, themeLocale.value));
        provide(sidebarItemsSymbol, sidebarItems);
    },
});
